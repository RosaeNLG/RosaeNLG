{
  "openapi": "3.0.1",
  "info": {
    "title": "RosaeNLG API",
    "description": "API over the Natural Language Generation library RosaeNLG",
    "contact": {
      "name": "Ludan Stoeckl√©",
      "email": "contact@rosaenlg.org",
      "url": "https://rosaenlg.org"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "externalDocs": {
    "description": "RosaeNLG reference documentation",
    "url": "https://rosaenlg.org"
  },
  "components": {
    "schemas": {
      "JSONPackageSchema": {
        "$ref": "jsonPackage.schema.json"
      },
      "JSONRenderInputSchema": {
        "$ref": "renderOptionsInput.schema.json"
      },
      "RenderResponseAbstract": {
        "type": "object",
        "properties": {
          "renderedText": {
            "type": "string",
            "description": "the rendered text (this is the interesting part)"
          },
          "renderOptions": {
            "type": "object",
            "allOf": [
              {
                "$ref": "renderOptionsInput.schema.json"
              },
              {
                "type": "object",
                "properties": {
                  "randomSeed": {
                    "type": "integer",
                    "description": "the random seed value that was used to render"
                  }
                }
              }
            ],
            "additionalProperties": false
          },
          "outputData": {
            "type": "object",
            "description": "generic holder of data output by the template"
          },
          "ms": {
            "type": "integer",
            "description": "the time in ms that was necessary to process the request (server side)"
          }
        }
      }
    },
    "parameters": {
      "templateIdInPath": {
        "name": "templateId",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "example": "chanson",
        "required": true,
        "description": "ID of the template"
      },
      "userInHeader": {
        "name": "X-RapidAPI-User",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "description": "ID of the user, when going through Rapid API"
      }
    }
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health check.",
        "responses": {
          "200": {
            "description": "Health is ok."
          },
          "503": {
            "description": "Bad health, typically cannot write to disk or S3 when persistent storage is set."
          }
        }
      }
    },
    "/version": {
      "get": {
        "summary": "Get the deployed RosaeNLG version.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "Health is ok.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "description": "RosaeNLG version"
                    }
                  },
                  "required": [
                    "version"
                  ]
                },
                "example": {
                  "$ref": "version.json"
                }
              }
            }
          },
          "500": {
            "description": "Get version failed."
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Get the IDs of the templates for user.",
        "description": "Contains both the loaded templates and the ones which are on the permanent storage",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "the IDs of the templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ids": {
                      "type": "array",
                      "description": "list of the IDs",
                      "items": {
                        "type": "string"
                      },
                      "uniqueItems": true
                    }
                  }
                },
                "example": {
                  "$ref": "listExample.json"
                }
              }
            }
          },
          "500": {
            "description": "templates could not be listed, generally due to a backend issue"
          }
        }
      },
      "put": {
        "summary": "Creates a new template.",
        "description": "Creates a template from a JSON containing a packaged template. \n\nThe template is validated, loaded, autotested (if configured so), and saved on disk or S3 if persistent storage is set. \n\nIt can be either a real template with code etc., or a template that points to another existing one (use type *existing* and *which* property).",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONPackageSchema"
              },
              "example": {
                "$ref": "chanson.json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "template was properly loaded and is available for rendering",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templateId": {
                      "type": "string",
                      "description": "ID of the created template"
                    },
                    "templateSha1": {
                      "type": "string",
                      "description": "sha1 of the created template, to be used in render requests"
                    },
                    "ms": {
                      "type": "number",
                      "description": "the time in ms that was needed to load the template"
                    }
                  }
                },
                "example": {
                  "$ref": "chansonCreatedOrReloaded.json"
                }
              }
            }
          },
          "400": {
            "description": "invalid user name, or template could not be compiled, or invalid template format"
          },
          "500": {
            "description": "template should have been saved on disk or S3 but could not be saved"
          }
        }
      }
    },
    "/templates/{templateId}": {
      "delete": {
        "summary": "Deletes an existing template for a user.",
        "description": "Template will be unloaded, and deleted on the disk or S3 if permanent storage is set.",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "204": {
            "description": "template does not exist, or if it existed, it was deleted and unloaded"
          }
        }
      },
      "get": {
        "summary": "Gets information on a template: sha1 and the original content.",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "responses": {
          "200": {
            "description": "information on a template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templateSha1": {
                      "type": "string",
                      "description": "sha1 of the template, to be used in render requests"
                    },
                    "templateContent": {
                      "$ref": "jsonPackage.schema.json"
                    }
                  },
                  "required": [
                    "templateSha1",
                    "templateContent"
                  ]
                },
                "example": {
                  "$ref": "chansonGet.json"
                }
              }
            }
          },
          "400": {
            "description": "could not load template (e.g. invalid template content, compilation error)"
          },
          "404": {
            "description": "template does not exist for that user"
          }
        }
      }
    },
    "/templates/{templateId}/{templateSha1}/render": {
      "post": {
        "summary": "Renders an existing template using data.",
        "description": "Renders an existing template using data passed in the request. Payload is in additionnal properties of the input.",
        "parameters": [
          {
            "$ref": "#/components/parameters/templateIdInPath"
          },
          {
            "name": "templateSha1",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "example": "1bfdbcd203ec8e6f889b068fbb2d7d298b1db903",
            "required": true,
            "description": "sha1 of the template (from create call)"
          },
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JSONRenderInputSchema"
              },
              "example": {
                "$ref": "chansonInput.json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "rendering went well",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RenderResponseAbstract"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "templateSha1": {
                          "type": "string",
                          "description": "sha1 of the rendered template, usually the same as in the request, unless it was wrong (redirected)"
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "$ref": "chansonOutput.json"
                }
              }
            }
          },
          "308": {
            "description": "template exists for that user but with a different SHA1"
          },
          "404": {
            "description": "template does not exist for that user"
          },
          "400": {
            "description": "invalid user name, or issue during rendering"
          }
        }
      }
    },
    "/templates/render": {
      "post": {
        "summary": "Renders a template in the request using data also in the request.",
        "description": "Both template and data are passed in the request. Template is automatically cached for a while to accelerate the next calls.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userInHeader"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/JSONPackageSchema"
                  }
                ],
                "properties": {
                  "data": {
                    "description": "data to render the template",
                    "type": "object"
                  }
                },
                "required": [
                  "template",
                  "data"
                ]
              },
              "example": {
                "$ref": "chansonInput_directRender.json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "rendering went well",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/RenderResponseAbstract"
                    }
                  ],
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "indicates if the template was created, or if it existed before and cached version could be used",
                      "enum": [
                        "CREATED",
                        "EXISTED"
                      ]
                    }
                  }
                },
                "example": {
                  "$ref": "chansonOutput_directRender.json"
                }
              }
            }
          },
          "400": {
            "description": "invalid user, or missing template data, or missing data, or issue during template compilation, or issue during template rendering"
          }
        }
      }
    }
  }
}