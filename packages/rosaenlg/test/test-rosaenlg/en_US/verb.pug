//- Copyright 2019 Ludan Stoeckl√©
//- SPDX-License-Identifier: Apache-2.0
-
  util.expected = `
    Eats
    ate
    will eat
    eat
    ate
    will eat
    bent

    the toy looks
    the toy goes
    the toy swallows
    the toy ingests

    is swimming
    are listening
    have been letting
    will sleep
    will sleep
    are going to sleep

    eats, sleeps, eats, sleeps, eats
    eats, eats, eats, goes, sleeps
  `;

- var TOY = {};
- TOY.ref = 'toy_ref';
mixin toy_ref(obj, params)
  | the toy

-
  var subjS = getAnonymous('M', 'S');
  var subjP = getAnonymous('M', 'P');

t
  l #[+verb(subjS, 'eat')]
  l #[+verb(subjS, {verb: 'eat', tense: 'PAST'})]
  l #[+verb(subjS, {verb: 'eat', tense: 'FUTURE'})]
  l #[+verb(subjP, 'eat')]
  l #[+verb(subjP, {verb: 'eat', tense: 'PAST'})]
  l #[+verb(subjP, {verb: 'eat', tense: 'FUTURE'})]
  l #[+verb(subjP, {verb: 'bend', tense: 'PAST'})]
  //-l #[+verb(subjP, {verb: 'bend', tense: 'PAST', 'NEGATIVE':true })]

  l #[+subjectVerb(TOY, 'look')]
  l #[+subjectVerb(TOY, 'go')]
  l #[+subjectVerb(TOY, 'swallow')]
  l #[+subjectVerb(TOY, 'ingest')]

  //- new tenses available!
  l #[+verb(subjS, {verb: 'swim', tense: 'PROGRESSIVE_PRESENT'})]
  l #[+verb(subjP, {verb: 'listen', tense: 'PROGRESSIVE_PRESENT'})]
  l #[+verb(subjP, {verb: 'let', tense: 'PERFECT_PROGRESSIVE_PRESENT'})]
  l #[+verb(subjS, {verb: 'sleep', tense: 'SIMPLE_FUTURE'})]
  l #[+verb(subjS, {verb: 'sleep', tense: 'SIMPLE_FUTURE', WILL: true})]
  l #[+verb(subjP, {verb: 'sleep', tense: 'SIMPLE_FUTURE', GOING_TO: true})]

  //- list of verbs
  l
    eachz elt in [1,2,3,4,5] with { separator: ',', last_separator: ',' }
      | #[+verb(subjS, ['sleep', 'eat', 'go'])]
  l
    eachz elt in [1,2,3,4,5] with { separator: ',', last_separator: ',' }
      | #[+verb(subjS, {verb: ['sleep', 'eat', 'go']})]
